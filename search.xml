<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mybatis笔记</title>
    <url>/2023/08/11/Mybatis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>配置mybatis  步骤如下：</p>
<p>1.jar包和mysqljar包(必须),Junit测试jar包，pagehelper分页jar包，generator逆向过程jar包…</p>
<p>2.创建resource文件夹：需要文件  jdbc.property,mybatis-config.xml</p>
<p>3.创建实体类对应数据库，创建mapper.xml,绑定在mybatis-config.xml中，</p>
<p>编写sql语句和映射关系,编写测试代码</p>
<p>❤️ 标签,动态标签是mybatis的灵魂</p>
<p>常用sql标签:</p>
<p>抽离sqlsql  包含include</p>
<p>查询 select   增删改update</p>
<p>条件(自动去除and)where遍历foreach</p>
<p>动态设置条件set  可以消除，加前缀后缀trim  判断if</p>
<p>🤷‍♀️映射resultMap  类型resultType</p>
<p>🐐进阶：使用分页插件,逆向过程一键生成</p>
<p>1.注入依赖   或者导入生成器jar包</p>
<p>2.配置generator.xml配置生成器信息</p>
<p>3.运行生成器类的生成方法，进行一键生成</p>
<p>-----以上算是个人简单的思路笔记 ----end 😎</p>
]]></content>
  </entry>
  <entry>
    <title>git的emoji图标注释</title>
    <url>/2024/05/07/git%E7%9A%84emoji%E5%9B%BE%E6%A0%87%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h2 id="gitmoji"><a class="header-anchor" href="#gitmoji"></a>gitmoji</h2>
<p>有时我们会想在git上使用emoji来轻松一下我们的内容，所以就涉及了这个网站</p>
<p><a href="https://gitmoji.dev/">gitmoji | An emoji guide for your commit messages</a></p>
<p>这里是各种emoji的使用方式</p>
<p>例如:</p>
<p>🎨</p>
<p>⚡</p>
<p>🔥</p>
<p>🐛  (bug)</p>
<p>📝</p>
<p>🚀</p>
<p>✨</p>
<p>✅</p>
<p>💩</p>
<p>💡</p>
<p>💬</p>
<p>🔇</p>
<p>🤡</p>
<p>🔍</p>
<p>😃</p>
<p>💢</p>
<p>😠</p>
<p>:happy:</p>
<p>等一些emoji，其实很写法简单,就是   : 英文名称:            比如🐛  只需输入: bug ：（要使用英文标点）</p>
<h3 id="but"><a class="header-anchor" href="#but"></a>but</h3>
<p>😱 但是有个问题…</p>
<p>Hexo默认的markdown渲染引擎<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>已经不再支持将Github emoji渲染到静态的html中</p>
<p>所以直接使用在文章发布后你会发现没有emoji,所以得稍稍配置一下…(我直接百度🐶 )</p>
<h2 id="使用插件"><a class="header-anchor" href="#使用插件"></a>使用插件</h2>
<p>这里推荐的是 <code>hexo-renderer-markdown-it</code> 渲染器，支持扩展，采用的是 <code>markdown-it</code> 的内核来解析 markdown 的文本。</p>
<h3 id="第一步"><a class="header-anchor" href="#第一步"></a>第一步</h3>
<p>在你的blog目录下</p>
<p>先卸载掉原来的<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>，然后下载新的插件<a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>和<a href="https://github.com/markdown-it/markdown-it-emoji">markdown-it-emoji</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked -S</span><br><span class="line">npm i hexo-renderer-markdown-it -S</span><br><span class="line"></span><br><span class="line">npm i markdown-it-emoji markdown-it-task-lists -S</span><br></pre></td></tr></table></figure>
<h3 id="第二步"><a class="header-anchor" href="#第二步"></a>第二步</h3>
<p>❗ 在你的根目录的<font color=green> _config.yaml</font>下添加下面这段配置(注意是根目录blog下的 _config.yaml)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#让hexo支持emoji增加的插件配置  </span><br><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    html: true # 在 markdown 文本中支持 html tag 标签</span><br><span class="line">    xhtmlOut: false # 需要 xtml 文档，使用 &lt;br /&gt; 替代 &lt;br&gt;</span><br><span class="line">    breaks: true # 用 &lt;br&gt; 开始新的一行</span><br><span class="line">    linkify: true # 自动将 可能是链接的内容转换成链接</span><br><span class="line">    typographer: true # 印刷标识转换</span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-ins</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">    - markdown-it-emoji </span><br><span class="line">    - markdown-it-task-lists</span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: &#x27;&#x27;</span><br><span class="line">    permalink: false,</span><br><span class="line">    permalinkClass: &#x27;header-anchor&#x27;</span><br><span class="line">    permalinkSymbol: &#x27;&#x27;</span><br><span class="line">    case: 0</span><br><span class="line">    separator: &#x27;&#x27;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>然后提交就ok了</p>
<p>以上步骤应该就能支持emoji了</p>
<p>参考文章 :</p>
<p><a href="https://luckysusu.top/post/hexo_emoji.html">hexo中使用emoji表情 | 苏苏の休憩小屋 (luckysusu.top)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/102325252">Hexo 中使用 emoji 和 tasks - 知乎 (zhihu.com)</a></p>
<h4 id="部分emoji使用编码参考-🧐"><a class="header-anchor" href="#部分emoji使用编码参考-🧐"></a>部分emoji使用编码参考   🧐</h4>
<table>
<thead>
<tr>
<th style="text-align:left">人物</th>
<th>自然</th>
<th>事物</th>
<th>地点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>😐</strong> <code>:neutral_face:</code></td>
<td>☀️ <code>:sunny:</code></td>
<td><strong>💝</strong> <code>:gift_heart:</code></td>
<td>🏠<code>:house:</code></td>
</tr>
<tr>
<td style="text-align:left">😄 <code>:smile:</code></td>
<td>❄️ <code>:snowflake:</code></td>
<td>🎁 <code>:gift:</code></td>
<td>🏫<code>:school:</code></td>
</tr>
<tr>
<td style="text-align:left">😍 <code>:heart_eyes:</code></td>
<td><strong>☔️</strong> <code>:umbrella:</code></td>
<td>🎏 <code>:flags:</code></td>
<td>🏥<code>:hospital:</code></td>
</tr>
<tr>
<td style="text-align:left">😘 <code>:kissing_heart:</code></td>
<td><strong>☁️</strong> <code>:cloud:</code></td>
<td>🔔 <code>:bell:</code></td>
<td>🗾<code>:japan:</code></td>
</tr>
<tr>
<td style="text-align:left">😓 <code>:sweat:</code></td>
<td>⚡️ <code>:zap:</code></td>
<td>🎄 <code>:christmas_tree:</code></td>
<td>🏭<code>:factory:</code></td>
</tr>
<tr>
<td style="text-align:left">😤 <code>:triumph:</code></td>
<td>🐷 <code>:pig:</code></td>
<td>☎️ <code>:phone:</code></td>
<td>✈️<code>:airplane:</code></td>
</tr>
<tr>
<td style="text-align:left">😨 <code>:fearful:</code></td>
<td>🐗 <code>:boar:</code></td>
<td>🔉 <code>:sound:</code></td>
<td>🚲<code>:bike:</code></td>
</tr>
<tr>
<td style="text-align:left">😎 <code>:sunglasses</code></td>
<td>🐑 <code>:sheep:</code></td>
<td>📢 <code>:loudspeaker:</code></td>
<td>🚕<code>:taxi:</code></td>
</tr>
<tr>
<td style="text-align:left">😭 <code>:sob:</code></td>
<td>🐁 <code>:mouse2:</code></td>
<td>📰 <code>:newspaper:</code></td>
<td>🚌<code>:bus:</code></td>
</tr>
</tbody>
</table>
<p>详细请看参考文章或者文档 ,<a href="https://gitmoji.dev/">附上git支持emoji地址gitmoji</a></p>
]]></content>
  </entry>
  <entry>
    <title>bullshit</title>
    <url>/2023/12/17/bullshit/</url>
    <content><![CDATA[<p>​    大家好，我是 java 小菜鸡 iceblin ，之前就一直有搭建个人博客的想法（我相信大部分学编程的都希望有个自己的博客小天地的😃），现在终于实现了，欢呼喝彩嘿嘿</p>
<p>这是一个傻傻不正经的博主哈哈</p>
<p>⭐  iceblin 个人博客————启动！！！</p>
]]></content>
  </entry>
  <entry>
    <title>mqtt学习</title>
    <url>/2024/07/12/mqtt%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="MQTT"><a class="header-anchor" href="#MQTT"></a>MQTT</h2>
<p>device1   --sub--                     /login     接受信息 --{“user”:“admin”}</p>
<p>broker  —代理   — server-ip    (消息转发/异步/削峰填谷)</p>
<p>device2    —publish--              /login   {“user”:“admin”}   --qos 服务质量  0 1 2</p>
<p>设备通过连接broker来互相通信.</p>
<h4 id="背景说明"><a class="header-anchor" href="#背景说明"></a>背景说明</h4>
<p>笔者是个java菜鸡,目前工作中接触了物联网方面也就是 IOT</p>
<p>自然也接触到了MQTT,我想记录记录也介绍下 MQTT</p>
<h4 id="1-What-is-MQTT-😲"><a class="header-anchor" href="#1-What-is-MQTT-😲"></a>1.What is MQTT? 😲</h4>
<p><a href="https://www.emqx.com/zh/blog/the-easiest-guide-to-getting-started-with-mqtt">MQTT</a>  是一种轻量级的通讯协议,如 HTTP 类似用来发送和接受信息的,是专为资源受限的设备和低带宽、高延迟或不可靠的网络而设计.符合物联网设备的需求,因为可能有些时候设备比较边缘网络比较差等等原因,</p>
<p>这些物联网设备使用 MQTT 进行数据传输，因为它易于实施，并且可以有效地传输物联网数据。MQTT 支持设备到云端和云端到设备之间的消息传递。</p>
<h4 id="2-How-to-Communicate"><a class="header-anchor" href="#2-How-to-Communicate"></a>2.How to Communicate ?</h4>
<p>MQTT是一种类似消息队列的  <font color=green>发布–订阅</font>模式  , Client 间的通信就靠 Topic 主题的订阅和推送进行.</p>
<p>MQTT不同于 MQTT 是有个 Broker–代理, MQTT 代理是协调不同客户端之间消息的后端系统。代理的职责包括接收和筛选消息、识别订阅每条消息的客户端，以及向他们发送消息。它还负责其他任务，例如：</p>
<ul>
<li>授权 MQTT 客户端以及对其进行身份验证</li>
<li>将消息传递给其他系统以进行进一步分析</li>
<li>处理错过的消息和客户端会话</li>
</ul>
<p>MQTT 原理: 客户端和代理开始使用 MQTT 连接进行通信。客户端通过向 MQTT 代理发送 <em>CONNECT</em> 消息来启动连接。代理通过响应 <em>CONNACK</em> 消息来确认已建立连接。MQTT 客户端和代理都需要 TCP/IP 堆栈进行通信。<em><strong>客户端从不相互联系，它们只与代理联系</strong></em>。</p>
<p>例如下面:  一个客户端发布一个订阅,  每个客户端都可以发布和订阅   ,中间是需要靠 broker 转发订阅的消息的</p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/mqtt_2024-07-12_22-01-03.jpg" alt="img"></p>
<h4 id="MQTT-publish"><a class="header-anchor" href="#MQTT-publish"></a>MQTT publish</h4>
<p>MQTT 客户端以字节格式发布包含主题和数据的消息。客户端确定数据格式，例如文本数据、二进制数据、XML 或 JSON 文件。例如，智能家居系统中的灯可能会针对主题 <em>livingroom/light</em> 发布消息 <em>on</em>。</p>
<h4 id="MQTT-subscribe"><a class="header-anchor" href="#MQTT-subscribe"></a><strong>MQTT subscribe</strong></h4>
<p>MQTT 客户端向 MQTT 代理发送 <em>SUBSCRIBE</em> 消息，以接收有关感兴趣主题的消息。此消息包含唯一标识符和订阅列表。例如，您手机上的智能家居应用程序想要显示您家中有多少灯亮着。它将订阅主题 <em>light</em> 并增加所有 <em>on</em> 消息的计数器。</p>
<p>*** MQTT 通过 Qos 来决定推送消息的模式**</p>
<ul>
<li>
<p>QoS 0，最多交付一次。</p>
</li>
<li>
<p>QoS 1，至少交付一次。</p>
</li>
<li>
<p>QoS 2，只交付一次。</p>
</li>
</ul>
<p>其中，使用 QoS 0 可能丢失消息，使用 QoS 1 可以保证收到消息，但消息可能重复，使用 QoS 2 可以保证消息既不丢失也不重复。QoS 等级从低到高，不仅意味着消息可靠性的提升，也意味着传输复杂程度的提升。</p>
<p>**在一个完整的从发布者到订阅者的消息投递流程中，QoS 等级是由发布者在 PUBLISH 报文中指定的，大部分情况下 Broker 向订阅者转发消息时都会维持原始的 QoS 不变。不过也有一些例外的情况，根据订阅者的订阅要求，消息的 QoS 等级可能会在转发的时候发生降级。 **</p>
<h3 id="MQTT-的文件传输"><a class="header-anchor" href="#MQTT-的文件传输"></a>MQTT 的文件传输</h3>
<p>是一种基于 TCP 的物联网通信协议，其 Payload 可以容纳任意类型的数据，例如文本、二进制、JSON、XML 等多种格式。这种灵活性使得 MQTT 在物联网应用中拥有广泛的适用性，能够满足不同场景下多样化数据传输的需求。</p>
<p><a href="https://docs.emqx.com/zh/enterprise/latest/file-transfer/client.html">文件传输客户端开发 | EMQX 企业版文档</a></p>
<p>🔚 暂时理解这么些,其余后面再补充 Thanks~</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/04/03/u%E7%9B%98%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>省流:笔者在某宝花了40块买了个64g的海康威视的u盘,闲着没事测试测试u盘性能😢</p>
<p>1.测试软件: <strong>Parkdale</strong></p>
<p>结果:HIKSEMI - 3.00 58.6 GB HIKSEMI (G:): 37.9 MByte/sec read, 33.9 MByte/sec write USB<br>
软件评价:</p>
<ul>
<li>This is pretty slow for a USB3 device. USB3 device on USB3 controller in USB2 speed!</li>
<li>对于USB3设备来说，这是相当慢的。USB3设备上的USB3控制器在USB2速度!</li>
</ul>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240403193421546.png" alt="img"></p>
<p>2.测试软件:<strong>HD Tune</strong></p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240403193057026.png" alt="img">)</p>
<p>3.测试软件:<strong>CrystalDiskMark</strong> 8.05</p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240403194038125.png" alt="img"></p>
<p>解释:</p>
<p>主要看第1项顺序读写和第3项4K<a href="https://www.zhihu.com/search?q=%E9%9A%8F%E6%9C%BA%E8%AF%BB%E5%86%99&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2624013318%7D">随机读写</a></p>
<p><strong>SEQ1M|Q8T1</strong>表示顺序读写，位深1024K，1线程8队列的测试速度</p>
<p><strong>SEQ1M|Q1T1</strong>表示顺序读写，位深1024K，1线程1队列测试速度</p>
<p><strong>RND4K|Q32T1</strong>表示随机读写，位深1024*4K，1线程32队列的测试速度</p>
<p><strong>RND4K|Q1T1</strong>表示随机读写，位深1024*4K，一线程一队列的测试速度</p>
<ul>
<li>
<p>Seq指的是连续测试，可以理解为影音文件的读写速度，商家标称速度一般指的是这个速度4K随机读写性能代表了硬盘的数据吞吐能力(单位为iops)，比如：<a href="https://www.zhihu.com/search?q=%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2624013318%7D">网页缓存</a>的写入、系统文件更新，包括程序、游戏的加载、响应等等都与随机4K读写性能息息相关。对硬盘来说，4K读写的快慢决定了系统的操作体验，对<a href="https://www.zhihu.com/search?q=U%E7%9B%98&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2624013318%7D">U盘</a>来说，代表了零碎文件（比如复制有大量小文件的文件夹）的读写速度。</p>
</li>
<li>
<p>比如你按下开机按钮，进入Windows以后，启动Windows这个过程既涉及连续文件读，也涉及4K随机读。这个过程有512B文件到128KB各种大小文件的读写过程。Windows正常运行时，产生的<a href="https://www.zhihu.com/search?q=%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2624013318%7D">临时文件</a>。也是混合两种文件。</p>
</li>
</ul>
<p>P.s :  随机=random['rændəm]   顺序=sequence[ˈsiːkwəns]</p>
<p>4.测试软件: <strong>ATTO Disk Benchmark</strong></p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240403200357838.png" alt="image-20240403200357838"></p>
]]></content>
  </entry>
  <entry>
    <title>一些开发中的术语介绍.md</title>
    <url>/2024/07/12/%E4%B8%80%E4%BA%9B%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%9C%AF%E8%AF%AD%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="背景介绍"><a class="header-anchor" href="#背景介绍"></a>背景介绍</h3>
<p>笔者最近关注到一些开发中的术语,但是属于架构或者服务方面的,对刚进门的开发来说接触式属于比较少的,所以想记录一些</p>
<h3 id="术语"><a class="header-anchor" href="#术语"></a>术语</h3>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">术语</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">QOS</td>
<td style="text-align:left">Quality of Service）即&quot;服务质量&quot;</td>
</tr>
<tr>
<td style="text-align:left">QPS</td>
<td style="text-align:left">Queries Per Second 意思是“每秒查询率”</td>
</tr>
<tr>
<td style="text-align:left">TPS</td>
<td style="text-align:left">是 TransactionsPerSecond 的缩写，也就是事务数/秒</td>
</tr>
<tr>
<td style="text-align:left">RT</td>
<td style="text-align:left">响应时间 RT(Response-time)  ,请求开始到响应结束的时间</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h3 id="一些组件或者中间件"><a class="header-anchor" href="#一些组件或者中间件"></a>一些组件或者中间件</h3>
<table>
<thead>
<tr>
<th style="text-align:left">name</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SkyWalking</td>
<td>链路追踪用的</td>
</tr>
<tr>
<td style="text-align:left">RabbitMQ</td>
<td>消息队列,异步,用作削峰填谷</td>
</tr>
<tr>
<td style="text-align:left">RocketMQ</td>
<td>消息队列</td>
</tr>
<tr>
<td style="text-align:left">Kafka</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">zookiper</td>
<td>链路追踪</td>
</tr>
<tr>
<td style="text-align:left">Prometheus</td>
<td>(普罗米修斯）监控系统</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  <entry>
    <title>人生第二次面试</title>
    <url>/2024/05/29/%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p>我想分享我的第二次面试的经历，笔者是个毕业一年的fw大专程序员 😢</p>
<h3 id="故事"><a class="header-anchor" href="#故事"></a>故事</h3>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">	笔者姑且算个不合格的程序员，技术局限在java语言和一些框架的应用,</span><br><span class="line">对源码和算法没有什么深入了解,算是个copy</span><br><span class="line">码农。已经失业半年了，然而笔者不甘心仍然想继续在计算机行业发展，</span><br><span class="line">近期简历被一个中小企业邀请去面试了。我大为欣喜，</span><br><span class="line">一天时间基本把面试题和基本技术要求看了七七八八，其实好久没写代码了我。 :D</span><br><span class="line">	虽然但是没想到在面试那天下午我发现有6个哥们来面试和我一样的岗位，</span><br><span class="line">不过当时我想也正常,择优筛选嘛。</span><br><span class="line">人事先给我们发了张java笔试卷子，基本没什么难度，</span><br><span class="line">我做完后来了个类似资深程序员和我一对一谈话（应该大部分小公司面试流程都这样的吧）。</span><br><span class="line">	重点来了，谈话过程就不详谈了，该公司需要的是全栈工程师...</span><br><span class="line">说项目很多基本可能要一个人负责一个项目而且进度也可能要自己把握自己交付。</span><br><span class="line">我顿时感觉不对就问你们是外包吗,他说也有承接项目和自研项目。</span><br><span class="line">	好吧,我觉得这个不好说,但是我进去就是独立做外包项目给他们,</span><br><span class="line">我感觉又要gg了。大中公司不要我，小公司想拉扯我...</span><br><span class="line">真的还有必要继续坚持java开发么？</span><br><span class="line">生活来源需要钱，可是继续没工作-&gt;投简历这段时间很挂逼。</span><br><span class="line">	我是上过班的，我明白上班后996的辛苦和每天回家一个人的emo时间，</span><br><span class="line">我不明白上班的意义，而且每天伏案打代码，现在身体腰椎颈椎都时不时疼痛，</span><br><span class="line">时常头晕得难受，身体越来越虚。眼睛度数不知道又加剧了多少，</span><br><span class="line">家里人只是希望我能工作，我没什么朋友，我上班又会积攒很多负面情绪，</span><br><span class="line">一直觉得自己干啥不行。那段上班时间我差点抑郁了，所以我离职了。</span><br><span class="line">	在别人看来我很矫情吃不了苦，我也确实承认有一部分。</span><br><span class="line">	打算放弃java放弃计算机了，可能真的不适合我。</span><br></pre></td></tr></table></figure>
<p>以上是笔者真诚得心路历程和想法，谢谢</p>
<p>💇</p>
]]></content>
  </entry>
  <entry>
    <title>函数式编程</title>
    <url>/2024/06/09/%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="函数编程"><a class="header-anchor" href="#函数编程"></a>函数编程</h2>
<p>什么是函数，函数就是一种规则，当我们输入x后，根据规则输出返回f(x)计算的结果给我们，f(x) 就是函数</p>
<h3 id="合格的函数"><a class="header-anchor" href="#合格的函数"></a>合格的函数</h3>
<p>✅一个合格的函数</p>
<p>我们的规则需要不可变，也就是<font color=green> 函数内部的逻辑不可以依赖可变的外部数据</font></p>
<h3 id="函数对象"><a class="header-anchor" href="#函数对象"></a>函数对象</h3>
<p>函数对象的语法格式</p>
<p>如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数 -&gt; 逻辑部分</span></span><br><span class="line">student -&gt; student.sex.equal(<span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这就是一个函数对象，(解析：返回student的性别是否是男性的boolean值)</p>
<p>🔴 函数对象接口定义写法 如下:（<font color=blue>也就是函数式接口,可以使用lambda匿名函数</font>）</p>
<p>🔵 如果希望该接口更通用、可扩展  即可使用 <font color=green>泛型T </font> 来做函数方法的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">interface [函数对象名称] &#123;</span><br><span class="line">    [一个函数方法]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记得lambda表达式要看成是一个函数对象</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ****  函数式接口的定义 ---加上泛型更具扩展性 ******//</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">@FunctionalInterface</span></span><br><span class="line"> <span class="keyword">interface</span> <span class="title class_">Type2</span>&#123;</span><br><span class="line">     Object <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接受任意类型实现与返回</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@FunctionalInterface</span></span><br><span class="line"> <span class="keyword">interface</span> <span class="title class_">Type1</span>&lt;T&gt;&#123;</span><br><span class="line">     T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接受任意类型实现与返回，接受任意参数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@FunctionalInterface</span></span><br><span class="line"> <span class="keyword">interface</span> <span class="title class_">Type3</span>&lt;O,I&gt;&#123;</span><br><span class="line">     O <span class="title function_">get</span><span class="params">(I i)</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数对象的好处​-happy"><a class="header-anchor" href="#函数对象的好处​-happy"></a>函数对象的好处​ :happy:</h4>
<h5 id="行为参数化"><a class="header-anchor" href="#行为参数化"></a>行为参数化</h5>
<p>我们可以以此写出一些通用性的方法，</p>
<p>应用场景：一些重复代码比较多的函数,</p>
<p>比如遍历一个数组students（里面有一些student对象），需要根据student性别或者年龄或者其他参数来筛选</p>
<p>🌵 <font color=green>我们就可以使用行为参数化来实现不同的筛选条件，而不必每种不同的筛选条件都写一个新方法。</font></p>
<p>在函数参数多加一个函数对象 (下面的 Lambda 是已经定义好的函数接口) ,在逻辑部分使用函数调用函数对象内的方法</p>
<p>例如：</p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240510204930110.png" alt="通用性函数"></p>
<p>🔴 调用方式</p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240510205054281.png" alt="调用方式"></p>
<h4 id="方法引用"><a class="header-anchor" href="#方法引用"></a>方法引用</h4>
<p>如图，是lambda表达式的简写版本</p>
<p>👍 tips: <font color=green> 只要注意方法引用的方法需要什么参数才能执行，即可推断出lambda写法</font></p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240513164550524.png" alt="方法引用与lambda等价写法"></p>
<h4 id="JDK-中的函数式接口"><a class="header-anchor" href="#JDK-中的函数式接口"></a>JDK 中的函数式接口</h4>
<p>其实<code>jdk</code>中已经定义好了一些函数式接口方便我们使用，满足我们大部分的需求了，所以我们基本不需要自定义了,直接调用就行</p>
<p>🔴这是<code>jdk</code>中我们常用的函数式接口 ，lambda写法对应参数与返回值如下</p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240513180239730.png" alt="常见函数式接口特点"></p>
<p>附上梳理图</p>
<p><img src="https://iceblin-blog.oss-cn-guangzhou.aliyuncs.com/blog-img/image-20240513181000470.png" alt="梳理"></p>
<h4 id="方法引用类型和Stream流："><a class="header-anchor" href="#方法引用类型和Stream流："></a>方法引用类型和Stream流：</h4>
<ol>
<li>
<p><strong>类名: : 静态方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>)</span><br><span class="line">)    <span class="comment">//打印</span></span><br><span class="line">   <span class="comment">// .forEach((stu)-&gt;System.out.println(stu) )    #lambda写法 </span></span><br><span class="line">  .forEach(Method01::printStudent) <span class="comment">//静态方法引用 写法</span></span><br><span class="line">    ....</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Method01</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printStudent</span><span class="params">(Student stu)</span>&#123;</span><br><span class="line">    System.out.println(stu)</span><br><span class="line">	&#125;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>类名: : 非静态方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数--&gt;逻辑</span></span><br><span class="line">Student::getName   -&gt;stu.getName()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>前端初开发体会</title>
    <url>/2024/08/30/%E5%89%8D%E7%AB%AF%E5%88%9D%E5%BC%80%E5%8F%91%E4%BD%93%E4%BC%9A/</url>
    <content><![CDATA[<h3 id="前端新体会"><a class="header-anchor" href="#前端新体会"></a>前端新体会</h3>
<p>笔者对前端是基本没什么了解，纯纯小白一枚，公司开发需要写后台系统的页面和app的页面，记录一些经验</p>
<p>后台管理系统是用的vue3，笔者只在以前做过一个vue2的项目，还是copy的vue-admin-template的开源模版来做的，对vue只停留在使用elmentui和几个hook函数的认知阶段，js很多工具方法没用过，只会简单写个事件的方法和古老的 document文档元素(但其实也忘了  😅 )</p>
<p>然后css样式和布局也是一知半解 ，样式基本只会换个颜色和大小,位置也没搞清楚，基本只会copy其他ui库的文档demo来改改用。</p>
<ol>
<li>
<p>App.vue 页面是项目启动好像就会执行的，可以在这里做一下启动的初始化。</p>
<p>vue的封装和抽离需要学学，比如把某些信息(例如登录信息)存到全局文件或者其他文件再将文件export，需要时直接import</p>
</li>
<li>
<p>aximos请求库，封装到request.js文件，可以在这里做一下代理和请求/响应的 拦截，做一下请求头配置 例如:携带token 之类的。</p>
</li>
<li>
<p>其他modules可以放在项目里作库引用，例如一些ui库，sdk等等</p>
</li>
<li>
<p>uniapp的布局内容需要计算，比如滚动列表的高度动态计算，</p>
</li>
<li>
<p>uniappH5对接微信支付/支付宝支付  ，等需要比如微信微信环境，注册appid和secret，再微信浏览器环境拿到用户code -&gt;去拿openId和accessToken  -&gt; 去拿userInfo 获取微信用户信息等等，  openId需要存在全局，因为支付需要它， 使用支付提共的sdk方法调用。</p>
</li>
<li>
<p>开发调试,需要微信环境/支付宝环境 ， 可以在chrome的netconditions替换UA为自定义，在把填入微信或者支付宝的 UA来可以模拟环境，  微信还可以手机usb链接PC端，调试微信的内置浏览器 —这样你可以在手机微信浏览器访问时，pc可以同步拿到f12的信息做调试，比如你要看token和网络请求等等。    使用流程 ：a. 先手机usb连pc，手机usb设置为可以文件传输  b. 手机打开<a href="http://debugxweb.qq.com/?inspector=true">http://debugxweb.qq.com/?inspector=true</a>  ，c. pc在chrome打开 <a href="chrome://inspect/#devices">chrome://inspect/#devices</a></p>
</li>
</ol>
<p>反思一下:遇到不少问题，其实每次都应该问自己，我要什么结果，然后拆分为要做什么 -&gt;拆分为开发步骤 -&gt; 再去通过代码实现</p>
<p>我会每次都在文档写好流程步骤再去开发，不然不清楚流程开发容易让人白做无用功，并且情绪化，容易增加心智负担。</p>
<p>总之还是需要多多积累和思考，笔者实力有限有限理解应该不全面或者错误，还请大家一起多多交流、指正.</p>
<p>thanks for your watch,have a good one  😃</p>
]]></content>
  </entry>
  <entry>
    <title>对接第三方api</title>
    <url>/2023/12/18/%E5%AF%B9%E6%8E%A5%E8%AE%BE%E5%A4%87api%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<h2 id="对接第三方api-接口记录"><a class="header-anchor" href="#对接第三方api-接口记录"></a>对接第三方api 接口记录</h2>
<p>这两天在对接门禁设备到安防系统，遇到一些问题和get到一些新技巧</p>
<p>📑</p>
<ol>
<li>
<p>第三方api和安防系统的需求有不完整的敌法</p>
<p>在调用远程开关门的时候，门禁的打开或者关闭的状态没法看到，虽然写好了代码但是测试开门或者常开等其他状态时，门禁的显示屏都没变化，无法得知是否成功执行，只能等门禁真正安装才能查看？这显然不合理，那开发在测试时不知道是否有问题。</p>
<p><font color=red>所以在对接代码前先测试一下api接口是否符合预期</font></p>
</li>
<li>
<p>对安防系统的代码不够熟悉，有些数据不知道是在哪里获得的和流通的走向</p>
<p><font color=blue>这个没办法只能一点一点打断点或者请教，自己看代码的话容易花费太多时间,系统的各个模块相互依赖比较多需要将负责的部分去理解数据流向</font>&gt;</p>
</li>
</ol>
<p>📖 get新技巧：</p>
<ul>
<li>postman的环境变量设置,可以使用<code>&#123;&#123;&#125;&#125;</code>这个类似插值表达式来取环境变量的值，postman可以在test里将比如登录认证返回的token更新设置到环境变量里</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>工作总结</title>
    <url>/2024/01/10/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>我总结一下自己工作一个月以来学到的一些方法论和思想</p>
<p>工作上面感想:</p>
<p>🤔  <font color=orange> 好的工作方式能提高执行效率</font></p>
<ol>
<li>工作的方式最好是效率为先，能当面沟通最好，其次电话沟通，打字沟通效率慢</li>
<li>问问题最好是有个大纲或者截图，说清楚自己在干吗，遇到了什么不懂</li>
<li>只要进来公司就不要害怕别人瞧不起你，不懂就问很正常，交流需要认真</li>
<li>上班的内心一定要保持松弛感，一直紧绷着整个人都不会进步也不会好，会积累压力</li>
<li>大胆提出自己的想法不丢人，不懂就不懂，不能不懂装懂会浪费时间和内耗自己</li>
<li>每次都要预估一下自己完成的时间，将一件事情在心中大概计划的 分时间段完成</li>
<li>完成后需要测试截图将结果和组内沟通，初步确认</li>
</ol>
<p>技术层面感想:</p>
<p>👨‍💻  <font color=orange> 好的编程思想能提高代码质量</font></p>
<ol>
<li>
<p>写代码一定要先把实现逻辑想清楚，不然不敲代码，否则是在浪费时间，也不是一种负责的行为,  只有清楚了逻辑你才能和别人讲你的实现思路。</p>
</li>
<li>
<p>测试非常重要，一定要单元测试，在接口层尽可能的不要去写业务逻辑，要在工具类里去拆解封装好工具函数，并且测试你的工具函数，最后再在接口函数里去调用各种你的工具函数，这样接口才不会臃肿，更好的管理代码。</p>
<p>⭐</p>
</li>
<li>
<p>日志一定要打，每一步的代码都要为自己负责，每一个函数保证自己的正确性，所以每次都需要优先考虑执行错误的情况，并且做出if else判断，每次都要输出日志，最好是每个函数调用都判断，方便出问题能根据日志快速定位到具体的代码函数</p>
</li>
<li>
<p>遵循设计原则–开闭原则、里氏替换原则等等  写代码一定要考虑后期的维护和规范，写好封装的调用函数，尽量让自己的代码足够动态，对扩展开放，后人不必修改自己的代码也能增加功能。</p>
</li>
<li>
<p>测试，写完一个方法就要实现这个方法的测试自证自己的代码，如果能在写代码前先写好单元测试根据测试来实现那可能更好(maybe)</p>
</li>
</ol>
<p>工具方面的感想</p>
<p>📏  <font color=orange> 好的工具能提高工作效率 </font></p>
<p>测试工具:</p>
<p>java后端测试的工具推荐</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">postman --接口文档和测试</span><br><span class="line">Apifox  --接口文档和测试</span><br><span class="line">swagger --接口文档和测试</span><br><span class="line">fiddle  --抓包和发送请求</span><br><span class="line">jmeter  --压测</span><br></pre></td></tr></table></figure>
<p>网络测试工具:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sockettools  --模拟tcp/udp 端</span><br><span class="line">httpserver   --模拟http服务器</span><br><span class="line">fiddle</span><br><span class="line">也可以自己手动写监听的jar包 </span><br></pre></td></tr></table></figure>
<p>感想:</p>
<p>工作如果真的无法适应，并且你尝试做出了努力，那么就离开它。</p>
<p>合适的工作才是长久的，离职也不</p>
<p>是一个坏的选择，花一些时间考虑清楚自己的规划和意愿，自由思考的感觉真棒。</p>
]]></content>
  </entry>
  <entry>
    <title>工作的一些新体会</title>
    <url>/2024/07/24/%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E4%BD%93%E4%BC%9A/</url>
    <content><![CDATA[<h3 id="关于工作的一些体会"><a class="header-anchor" href="#关于工作的一些体会"></a>关于工作的一些体会</h3>
<h4 id="1-git-的一些新体会"><a class="header-anchor" href="#1-git-的一些新体会"></a>1. git 的一些新体会</h4>
<p>笔者工作时懵逼 把master的内容合并提交到了dev</p>
<p>需要回退版本</p>
<p>后面使用了 git   reset --hard[指定版本号commit id] 本地回退到上次提交前，然后强制推送 git push -f 覆盖了代码到仓库</p>
<h5 id="git回退版本"><a class="header-anchor" href="#git回退版本"></a>git回退版本</h5>
<p>git reset 默认是–mixed ,会撤回所有指定版本之后的提交，   将指定版本后面的内容回退到工作区。</p>
<p>⭐ 如果git reset 没指定commit id的话 默认是回退到上一个commit.</p>
<p>例如 git reset 是回退上一次commit ,git reset [commit id] 回退代码到此版本的提交时,此版本后面的内容返回到工作区</p>
<p>git reset [commit id] --soft 是回退到暂存区，不是工作区</p>
<p>git reset  [commit id] --hard 撤回并清空工作区及暂存区所有修改  (<font color=red>慎用，因为会把指定版本后的所有内容清空，一定要备份好指定版本后面的代码内容。</font>)</p>
<p>🌟 <font color=red>工作常碰到的冲突问题 : </font> 当你和其他人都修改了同一文件, 那么其中一个人提交了远程仓库，另一个人会有两种无法pull的情况。</p>
<ol>
<li>
<p>另一个人  代码还没commit，此时pull 同步时git会提示你 远程和本地有相同文件夹都修改了，提示你进行commit，</p>
<p><font color=green>那么我们可以先commit再pull同步 ------此时会有冲突，需要你手动解决后再commit -&gt;push </font></p>
</li>
<li>
<p>另一个人 代码已经提交了，此时pull,git 会提示冲突 ，还是和上一步后面一样，手动本地解决冲突再push</p>
</li>
</ol>
<p>所以如果有冲突时需要多和其他人沟通 ，比如谁在写某个文件时，你也要写该文件，则探讨一下修改内容或者等他修改你再改也行。。。</p>
<p>所以时不时pull一下代码，如果失败则说明远程的某些文件和本地文件对应的文件有不同的修改，需要沟通好以免继续写代码发现后面和同事重复写了某个文件，所以提前发现冲突要好很多，因为可能此时代码还没有冲突很多。</p>
<h4 id="2-自定义starter"><a class="header-anchor" href="#2-自定义starter"></a>2.自定义starter</h4>
<p><a href="https://developer.aliyun.com/article/893073">保姆级教程，手把手教你实现SpringBoot自定义starter-阿里云开发者社区 (aliyun.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>水一篇</title>
    <url>/2024/06/10/%E6%B0%B4%E4%B8%80%E7%AF%87/</url>
    <content><![CDATA[<h4 id="🌊-水一篇文章"><a class="header-anchor" href="#🌊-水一篇文章"></a>🌊 水一篇文章</h4>
<p>六月了，昨天和朋友第一次体会他们喝酒玩色子 🎲 的规则。我了解到他们所谓的规则</p>
<p>每人有5个骰子，每次每个人都要说一组数字(比如3个1、6个6等等),这组数字是<br>
<font color=green>骰子数量*点数</font></p>
<p>需要每次的说出的这组数字的骰子数量或者点数要比上一组说的大(比如上一个人说了3个1，轮到你可以说3个2或者4个1等等)，也可以说开(开代表着所有玩家亮出骰子，如果上一个人说的条件<br>
——<font color=red>在场所有玩家的骰子点数和数量满足他所说的那组数字</font> （例如3个2必须有或者多于3个2的点数）<br>
——不符合则他输，否则你输)<br>
🔴1默认是个万能点数(可以看作其他点数)，有时只能作为1的点数。</p>
<p>斋:默认是1为万能点数<br>
破斋:1无法作为万能点数，只能作为1，如果有人说的那组数 骰子数量小于上一个人 那么就可以说是破斋了</p>
<p>其余还有劈，反劈等等这些，笔者也不懂只是了解了大概。</p>
<p>最后还是说，这只是个为了喝酒娱乐而设计的小游戏，主要是靠一些心理博弈，输了也没什么惩罚就是喝一杯。</p>
<p>有的人觉得好玩，有的人觉得无聊(笔者就是,其实是不太喜欢这种场合呵呵)。</p>
<p>✌️ have a nice time!</p>
<p>端午安康🦆</p>
]]></content>
  </entry>
  <entry>
    <title>第二周工作记录</title>
    <url>/2023/12/24/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>这周工作下来明显感觉到了自己的不足</p>
<p>⭐</p>
<ol>
<li>
<p>技术不太行，虽然有点羞愧但事实如此，很多基本的代码和工具类都是靠别人写的和抄出来的，缺少自己的灵活使用和理解。</p>
<p>-----还需要多写自己的代码，别人的代码固然优秀但是自己也要造一造轮子</p>
</li>
<li>
<p>业务理解不够，对自己的工作内容的业务理解不到位，和组员沟通不够及时，总是害怕自己给他人带来麻烦。</p>
<p>------需要正视自己的内心态度，麻烦别人是很正常的，现在麻烦别人以后就可以减少麻烦了，麻烦别人的时间可能也就几分钟，自己不会瞎捉摸能浪费几十分钟，是十倍于时间的消耗，这是需要明白的道理，但是问问题前需要有自己的思考。</p>
</li>
<li>
<p>沟通效率不够，遇到问题没有抓住自己目前矛盾的最核心要点，问也不知道怎么问或者问了别人根本不清楚。</p>
<p>​	------尽量做到以下，至少有做到3点</p>
<ol>
<li>
<p>表示我自己在干吗？（让人清楚你的内容大概）</p>
</li>
<li>
<p>我遇到了什么问题（直接说什么错误）</p>
</li>
<li>
<p>我的预期是什么</p>
</li>
<li>
<p>我做了什么 （代码怎么写的/配置怎么配置的…）</p>
</li>
<li>
<p>我想完成什么样的效果（想让你帮我干嘛）</p>
</li>
<li>
<p>你清楚吗/你有什么建议吗/你觉得我可能什么地方没注意到</p>
</li>
</ol>
</li>
</ol>
<p>✉️</p>
<p>ok,这周主要是对接了一个门禁一体机到安防系统，实现了</p>
<ul>
<li>
<p>功能：系统对门禁的远程开关门和创建、删除人员；</p>
</li>
<li>
<p>事件：有人刷卡刷脸会将事件记录上报给安防系统，能看到行踪记录</p>
</li>
<li>
<p>属性：门的状态属性上报，系统可以得知当前门是处于开的还是关的还是常开常关。</p>
</li>
</ul>
<p>总结：菜就多练，不会就多沟通! O(∩_∩)O哈哈~</p>
<p>下周加油，keep住，其实工作也没很难。现在信心大增hhh</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/08/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<p>😄</p>
<h2 id="java复习总结"><a class="header-anchor" href="#java复习总结"></a>java复习总结</h2>
<ol>
<li>
<p>java基础快速重新复习</p>
</li>
<li>
<p>项目重新跑起来，看看源代码</p>
</li>
<li>
<p>面试问题常问问题</p>
</li>
<li>
<p>前端vue复习和测试工具熟悉</p>
</li>
<li>
<p>开发原则复习</p>
</li>
</ol>
<p>🔚</p>
]]></content>
  </entry>
</search>
